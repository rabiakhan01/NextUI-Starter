<ToggleSwitch
            startContent={<p>yes</p>}
            endContent={<p>no</p>}
            size=""
            selected={isSelected}
            color='success'
            className={
              {
                wrapper: "group-data-[selected]:pl-5 h-[34px] w-[65px] !uppercase",
                startContent: "!text-[20px] text-white",
                endContent: "!text-[20px] !text-white",
              }
            }
            onValueChange={handelOnValueChange}
            thumbIcon={isSelected
              ?
              <LightModeIcon sx={{
                width: '10px',
                height: '10px'
              }} />
              :
              <DarkModeIcon sx={{
                width: '10px',
                height: '10px'
              }} />}
          />

          <ToggleSwitch
            startContent={<LightModeIcon />}
            endContent={<DarkModeIcon />}
            size="xl"
            color='warning'
            className={
              {
                wrapper: "group-data-[selected]:pl-5 h-[34px] w-[65px] !uppercase",
                startContent: "!text-[20px] text-white",
                endContent: "!text-[20px] !text-white",
              }
            }
          />

          <div className={`h-16 w-64 flex justify-end rounded-xl border-2 border-lime-200 ${isSelected ? 'bg-white' : 'bg-zinc-700'}`}>
            <ToggleSwitch
              startContent={<LightModeIcon />}
              endContent={<DarkModeIcon />}
              selected={isSelected}
              onValueChange={handelOnValueChange}
              color='secondary'
              className={
                {
                  wrapper: "group-data-[selected]:pl-2 h-[34px] w-[55px] !uppercase",
                  startContent: "!text-[20px]",
                  endContent: "!text-[20px]",
                }
              }
            />
          </div>
          <div className={`h-16 w-64 flex justify-end rounded-xl border-2 border-lime-200 ml-2 ${isSelected ? 'bg-white' : 'bg-zinc-700'}`}>
            <ToggleSwitch
              startContent={<LightModeIcon />}
              endContent={<DarkModeIcon />}
              selected={isSelected}
              onValueChange={handelOnValueChange}
              color='warning'
              className={
                {
                  wrapper: "h-[34px] w-[34px] rounded-lg ",
                  startContent: " text-white",
                  thumb: "hidden",
                  endContent: " text-black",
                }
              }
            />
          </div>

//select 

<div className='m-4'>
          <Select
            endContent={isSelected && <Close onClick={handelCross} sx={{ color: 'green' }} />}
            isOpen={isSelectOpen}
            onSelectionChange={handelSelectItem}
            color= "white"
            className={{
              base: "border-1 border-grayColor !bg-white !rounded-md",
              trigger: "border-1 border-grayColor !bg-white !rounded-md"
            }}
            onClick={handelClick}
          >
            {

              animals.map((animal) => (
                <SelectItem
                  key={animal.key}
                  textValue={value}
                  selectedIcon={isSelected ? false : true}
                >
                  {animal.label}
                </SelectItem>
              ))
            }
          </Select>
        </div>
const handelClick = (event) => {
    setIsSelectOpen(!isSelectOpen)
  }
  const handelSelectItem = (event) => {
    setValue(event.currentKey)
    setIsSelectOpen(false)
    setIsSelected(true)
  }
  const handelCross = (event) => {
    event.stopPropagation()
    setIsSelectOpen(false)
    setValue(" ")
    setIsSelected(false)
  }
    const [value, setValue] = useState('');
      
      